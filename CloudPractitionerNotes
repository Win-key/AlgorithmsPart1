1/17/2022
=========
Types of cloud
1. Private cloud
    Used by single organization.
    Complete control over network
    More security
    eg - Rackspace

2. Public cloud
    Cloud resources owned by third parties
    Delivered over internet

3. Hybrid cloud
    Can have both public clould and on primise

Adv:
1. On demand seft service
2. Broad network - Can access diverse platform and services over internet
3. Multi - tenancy and resource pooling - Multiple user can use the same infra
4. Rapid elasticity and scalability - Automatic & Quick scale up and down on demand
5. Measured service - You pay for what you use

Six advantages of cloud computing
1. Pay on demand
2. Low economies - as AWS run in large scale serving multiple users
3. Stop guessing capacity - Can get/remove resource on demand
4. Increase speed
5. Maintenance of servers is avoided
6. Go global in a min

Type of cloud computing
1. Infra as a service
    Provide the computers, networks , storage space
2. Platform as a service
    Taking the responsibility of managing the infra away from the organization
3. Software as a service
    Complete product that runs and managed by the cloud provider


On-Premises      Iaas              Paas               Saas
===========      ====              ====               ====
Applications     Applications      Applications       * Applications
Data             Data              Data               * Data
Runtime          Runtime           * Runtime          * Runtime
Middleware       Middleware        * Middleware       * Middleware
O/S              O/S               * O/S              * O/S
Virtualization   * Virtualization  * Virtualization   * Virtualization
Server           * Server          * Server           * Server
Storage          * Storage         * Storage          * Storage
Networking       * Networking      * Networking       * Networking

* Managed by provider

Types of Pricing
================
Incoming data is free
3 pricing model
1. Pay for computation
2. Pay for storage used
3. Pay for outgoing data

IAM
===========================================

Users and Groups
========================================================
Identity and Access Management
Global service
Root account - only for set up. should not be used for other purposes.
Users can be created with in an account.
Group is a collection of Users. Eg: Developers - Which may contains the users belong to development
Users can belongs to multiple groups.

** It's not best practice that users not added to a group.
    Access should be provided via groups. Not individually.

IAM - Permission
========================================================
Policy - A json data - That defines the access of a service and resource.
Policy can be assigned to a group or an individual user.

** Best practice: Least Privilege Access - Don't give more permission than user need.



Policy Inheritance
==========================================================

      developer policy            audit policy               testing policy         individual
        |                           |                           |                       |
    dev group                   audit group                 QA group                    |
________|_____  __________________|______________  ___________|____  ___________________|
|       |    | |                                | |      |        | |
dev 1 dev 2 dev 3                               qa 1    qa 2      qa3


Policy structure
===============
version - version of the language like 2012-10-17
id - identifier of the policy - opt
Statement - List of object that defines the access

Statement consist of
====================
sid - id of the statement - opt
effect - Allow or Deny
principle - account/user/role to which the policy need to be applied
action - List of actions this policy allows/denies
resource - List of resources to which these actions applied
condition - condition on which the policy is effective


Eg:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "ListObjectsInBucket",
            "Effect": "Allow",
            "Action": ["s3:*"],
            "Resource": ["arn:aws:s3:::cdsoa*"]
        },
        {
            "Sid": "AllObjectActions",
            "Effect": "Allow",
            "Action": "s3:*Object",
            "Resource": ["arn:aws:s3:::bucket-name/*"]
        }
    ]
}


IAM - Password Policy
================================================================================
Strong password
Define rules like password should have min length of password , upper / lower letters, numbers, special chars
Password expiration
Prevent password reuse

Go to
    IAM -> Account Settings -> Change password policy


IAM - MFA : Multi Factor Authentication
================================================================================
Advised to protect the root account with MFA, but can be done for all IAM users as well.
Combination of password and token generated from Authorized device.

How to access AWS
=================
* AWS Management Console - Protected by Password and MFA - provides access from computer browser
* AWS CLI - Protected by access keys and secret keys - provides access from local computer - Requires CLI installation - Build using Aws SDK for Python
* AWS SDK - Protected by access keys and secret keys - provides access from software application

Never share the access key and secret. They are important as password, since they provide access to your aws account and resources

To Start - AWS CloudShell: Region Availability

Cloud shell
===========

Allows users to run the aws commands from the browser.
Any files created here will stay here even after the cloud shell restart
Can create multiple command line within the cloud shell

IAM roles for AWS services
==========================

IAM roles are secure ways to grant permission to other entities that you trust.

AWS services sometime need permission to talk with other services
Like Ec2 talks with S3 to read and write files
Do achieve that we will have roles assigned to AWS services

Common roes:
* Ec2 instance role
* Lambda functions role
* Roles for cloud formations

How to access it -> IAM -> Roles -> Create / edit roles

IAM security tools
==================

1. IAM Credential report (account level) -
    All account's users and their status of various credentials

    IAM -> Under Access reports -> Credentials report

2. IAM Access Advisor (User level) -
    Service permissions granted to the users and the last accessed date of service
    So that we can revise the policies
    Helps to ensure the least privilege access

    IAM -> Users -> Click on a user -> Click Access advisor tab

IAM Best practices
==================

* Never use root account except for setting up the account
* One IAM user = One physical person
* Assign users to group for permissions
* Strong password policy
* Enable MFA
* Access keys and secret keys should be kept safe and not be shared with anyone.
* Use IAM roles for assigning permissions to AWS services
* User credential reports and access advisor to audit the users policy to ensure the least privilege access

Summary
========
Users : IAM user mapped to a physical person in the company
Group : Group of users -> Permissions assigned to the groups inherited to the users of the groups
        A user can be associated with multiple groups
Policy : A json document that define the permission which can be assigned to the user or a group


===========================================================
=======================  EC 2  ============================
===========================================================

Budget management
=================
Account -> My billing dashboard
This special permission need to be provided by the root account user
An IAM user to access this dashboard, One should log in as root user and
in My account need to enable IAM users to access Billing dashboard

To create a budget, Click on Budget tab in side nav bar.
    Choose a budget type
        Cost saving budget - Plan how much you want to spend on a service
        Usage budget       - Plan how much you want to use one or more services.
        Saving plan budget - Define a utilization threshold and receive alerts when the usage of your Savings Plans falls below that threshold.
        Reservation budget -

    These budgets help to configure the alerts when the threshold reaches.
    And send out the email alerts to the users.

EC2 Basics
===========
Elastic Cloud Computing - Infra as a service - IAAS
* Renting Virtual machines  - EC2
* Storage volumes           - EBS
* Load distributions        - ELB
* Auto scaling              - ASG

EC2 sizing and config options
=============================
OS - Linux , windows and Mac
CPU cores
RAM
Storage
    Network storage - EBS(Elastic block store)
                    - EFS (Elastic file system)

    Hardware        - EC2 instance store
Network card - speed and IP addresses
Fire wall using security groups
User data using bootstrap script script

EC2 User data
==============
Lunching instance with script
    which will install os updates , software
    and anything that needed for setting up the computer(EC2 here)

It's executed only once when instance is started at first time.
It will run with the root user. (sudo rights)

Few instance types:
    t2.micro
    t2.xlarge
    c5d.4xlarge
    r5....
    m5...

Creating AWS EC2 instances
==========================
1. Select an Instance
    Amazon Machine Image - Image that used to launch the machine

    Quick start - Provide AWS AMI
    My Images   - AMIs created by us
    Market place- AMIs created by other people
    Community   - Created by community people
2. Choose instance type - t2.micro, large, xlarge, ...
3. Instance details -
    Number of instances
    network
    Ip address
    Assigning IAM roles
    ** User data script - Can be provided as text or a file in based 64 encoded
        https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts
4. Add storage
    -
5. Tags
6. Security group - Can create or select from existing security groups
7. Review and launch
8. Create key value pair
    - Key to access the ec2 instance - Can download only once
    - Can create a new pair or select an existing pair
9. Launch....

How to end
    Stop - Stop for temp. Can start again.
    Terminate - Once terminate, cannot start the same instance again.
                Need to create a new instance.

======================================================
=================EC3 Instance class===================
======================================================

https://aws.amazon.com/ec2/instance-types/

Naming conventions: -
    m5:2xlarge
m       - instance class - defines the class of the instance - General purpose, storage or other type
5       - generation of the instance
2xlarge - size in the instance class

Instance classes
================
General Purpose : -
                provide a balance of compute, memory and networking resources
                Suitable for web servers and code repos

Compute Optimized -
            Used for tasks that requires high performance
            Like batch processing
            High performance web servers
            High performance computing
            Machine learnings

Memory Optimized
            Can handle huge volumn of data in memory
            Like SQL and NO-SQL dbs requires high performance and should be capable of handing huge data in memory
            Cache storages
            Real time unstructured data processing
Storage Optimized
            Great for high intensive file read write tasks
            Like SQL and NO-SQL dbs requires high performance and should be capable of handing huge data in memory
            Cache storages
            Real time unstructured data processing

Accelerated Computing
Instance Features
Measuring Instance Performance

=======================================================
==================== Security groups ==================
=======================================================

Fire wall to the ec2 instances
Defines the in and out bound network rules of the ec2 instances
Only specifies what ips can be allowed.
Can be tied with other Security groups
Access to ports

Where to create/edit SG
=======================
EC2 instance -> Network -> Security groups

Things to know:
===============
* Can be attached to multiple instances
* Locked to a region and vpc combinations
* Security group is not part of ec2 and that lives outside of ec2
    If the Security group blocks a request,
    ec2 is completely unaware
    that there is a request blocked by the security group
* Good to have on security group for SSH
* Time out exception - Possibly security group
* Connection refused -
     NO Security group issue, request reaches the ec2
     but there is other issue within ec2 that throws connection refused.
* All in bound requests are blocked
* All out bound requests are authorised
* You can apply multiple security groups to a single EC2 instance or apply a single security group to multiple EC2 instances

*** A security group can refer other security groups and allow based on the rules of referred security groups
    Doubt:
    ======
     * I have 2 security groups
        SG1 and SG2
        1. SG1 -> IB
            TLS -> 1122 -> SG2
        2. SG2 -> IB
            TLS -> 1122 -> IP range
            --> Should I need to have the same Protocol and Port here??

Importance ports to know
========================

22 - SSH - Secure shell - Log in to linux instance
21 - FTP - File Transfer Protocol - Upload files into file system
22 - SFTP - Secured FTP - Secured way of Uploading files into file system
80 - http - Hyper text transfer protocol - access UNsecured websites
443 - https - Hyper text transfer protocol Secured - access secured websites
3389 - RDP - Remote Desktop Protocol - log into windows system

How to connect to EC2 machine to do maintenance?
===============================================

                 SSH     Putty       Ec2 instance connect
                ------------------------------------------
Linux          | Yes   |  NA     |     Yes
MAc            | Yes   |  NA     |     Yes
Windows < 10   | NO    |  Yes    |     Yes
Windows >=10   | Yes   |  Yes    |     Yes

Ec2 instance connect works only for Amazon Linux 2 AMI

Hands on SSH
============

Using Mac/Linux/Windows 10+
===========================

We need the public ip of the EC2 machine
And security group that allows the user's IP over ssh protoco
    ssh -> 22 -> 0.0.0.0/0
And the key file (.pem)

ssh ec2-user@public_ip_of_ec2_machine

ec2-user is the default user name of ec2

==> Should be a Permission denied response
Though SSH configured to allow all IP,
   it requires the EC2 key pair file (.pem) to authorize the user.

ssh -i ec2_key_pair.pem ec2-user@public_ip_of_ec2_machine
    (ec2_key_pair.pem file should be placed in the directory)

If the key file is unprotected with chmod 0644 command,
    then there should be another Permission Denied response

To fix this, run
    chmod 0644 ec2_key_pair.pem

Should be good to go now........

To exit, run exit or ctrl + C

How to ssh into EC2 from Window using Putty
============================================
https://www.youtube.com/watch?v=jv-dgOfFN4o

Ec2 Instance connect
====================
Connect over browser.
This also requires SSH - 22 to be configured in SG

EC2 IAM roles
=============
When we need to have access to IAM role,
    we have to assign a IAM role to the EC2 instance.

We have already seen how to create an IAM role.
To assign it to an instance.
EC2
    -> Select an instance
        -> Actions
            -> Security
                -> Modify IAM role
                    -> Now already created IAM roles should be shown now.
                        Select the role needed
                        -> Save. Now permissions assigned to IAM role should be available for EC2 too.

How to connect to windows instance over RDP
===========================================

https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/connecting_to_windows_instance.html

EC2 Instance Launch types
=========================

1. On Demand
=============
* Pay for what you use
* Billing per second, after first minute (free)
* High cost, but No upfront payment (advance amount)
* Can terminate at any time

Best for short time and uninterrupted workloads

Reserved instances
==================
* Up to 75% discount compared to On demand
* Reservation can be 1 year or 3 year
* Purchase options
    - No upfront advance
    - Partial upfront advance + discount
    - Full payment ++ discount
* Can reserve a specific instance type
* Recommended for steady state instance - database

Other Variants of Reserved instances
===================================
Convertible Reserved instances
==============================
* Allows to convert the instances type
* Up to 54% discount (Lesser discount than the normal reserved instances)
Scheduled Reserved Instances
============================
* When having daily jobs that runs once in a day/month/year likewise
* Reserve for the time window
* Can reserve for 1 to 3 years
* Currently deprecated. We cannot buy now.

Spot instances
==============
* Can get 90% discount compared to on demand
* Can lose the instance at any point of time when the MAX threshold is reached
* Most cost efficient AWS instance type
* Should be used for recoverable use cases - Batch job that can be rerun, Image processing, distributed workloads(LB)
* Never use for critical tasks - DB, web server

Dedicated Host
==============
* Physical server with Ec2 instances which are fully dedicated our use
* Can address Compilence requirement
* Only allocated for 3 years reservation
 * Most expensive
* Since the physical hardware are dedicated to us, we can make use of the server inbound software licenses,
    Which will reduce our licensing costs.
        Eg: Windows license, SQL server license and other server licenses that are tied to vm, cpu and physical cores..
* This enable us to bring-your-own-license (BYOL). Used for complex licensing model.
* Provide more control of the underlying hardware like visibility of sockets, vms,cores, host ip.
    Targeted instance placement
https://aws.amazon.com/ec2/dedicated-hosts/
https://aws.amazon.com/about-aws/whats-new/2015/11/now-available-amazon-ec2-dedicated-hosts-and-the-ability-to-use-existing-server-bound-licenses/

Dedicated Instances
===================
* Instances running on hardware that is dedicated for us
* Instances can share the hardware within the same account.
    But not with other.
* Automatic instance placement only. No target placement
    Means first time intance could be placed on HW1, next time it could be HW@

Comparing Dedicated Host and Dedicated Instances
================================================
https://aws.amazon.com/ec2/dedicated-hosts/#:~:text=An%20important%20difference%20between%20a,same%20physical%20server%20over%20time.

Shared Responsibility between AWS and User on EC2
=================================================
            AWS                             User
* Infra network security                 * Security group rules
* Isolation of Physical host             * OS & software patches and updates
* Faulty HW replacement                  * IAM roles and IAM user access managements
* Compliance                             * Data security on EC2

Ec2 Instance Store
==================
* Storage HW device witnin the host machine.
* Provides low latency and high throughput
* Selecting Instance store or EBS is based on instance type.
* it offers temporary storage. In case of any Instance Failure, you will lose your data.
* Can be attached only during the start
* There is no stop for Instance store EC2. Only termination
* After you launch an instance, you must ensure that the instance store volumes for your instance are formatted and mounted before you can use them.

Elastic Block Store
===================

* It's a network drive attached to the EC2 instance while they run.
    - Since they are attached over network. Network Latency will be there.
    - They can be unmounted from a machine and mounted to another machine.
* It allows to persist the data, even after the EC2 termination
* It's bounded to the availability zone.
    - cannot mount a EBS from az1 to az2's ec2
    - To move the volume, you need to snapshot.
* At a time, it can be attached to the one instance alone.(At CCP level)
* Configured capacity will be provided.(GB and IOPS)
    - Billed what capacity and IOPS
    - Can change the capacity over time if needed.
* Multiple EBS volumes can be attached to a ec2 instance
* EBS volume and ec2 has to be in same az.
* For Failure recovery, EBS volume is auto replicate within the az.

Delete on termination policy
============================
There is a property in the create EC2 instance -> configure storage named "Delete on Termination"
This property allows the user to decide whether to delete the storage on instance termination
* Root volume
    - If it's instance store, volume will be delete on termination (NA)
    - If it's EBS volume, by default it will be delete on termination
        But can be opted not to delete on termination
* Non root storage
    - EBS volumes, By default not to delete on termination. but can be changed
    - Instance store also can be used as non root volume.


Good read for root volume to understand difference between EBS backed instance and Instance store backed instance
https://faun.pub/aws-understanding-root-device-volume-76df89d18ec4

EBS Multi-Attach
================
* io1 and io2 volume types can be attached to multiple instances
    For ccp they are out scoped.

EBS Snapshots
=============
* Back up of EBS volume at a point of time
* It's recommended to take the snapshot after detaching it from ec2, but not necessary.
* The state of EBS volume is persisted in snapshot and so can be used to create/recreate another ec2 from snapshot
* This snapshot can be copied to other AZ/Region and can be used for creating EC2 there.

Step to create snapshot
Select EBS volume
    -> Action -> create snapshot -> Add description
        -> Create snapshot

This created snapshot can be found in
    EBS service -> Snapshot in the left side nav bar

Copy snapshot
============
Select snapshot -> action -> copy
    -> select region
    -> copy

Create volume
=============
Select snapshot -> action -> Create volume
    -> Value are Pre populated with origin volume
    -> can change az here
    -> Create volume

Now this new volume can be attached to another az's EC2 instance.

AMI overview
=============
* Amazon Machine Image
* Customization of Ec2 instance
    - Can add our OS, software, configs, monitoring tools
    - Faster boot - As the software, configurations are pre-packaged.
* Build for specific region, can be copied to other region
* Options
    - Public AMI  - AWS provided
    - Own AMIs    - We make and maintain
    - MarketPlace - Someone else build and sell
    - Community   - Build by a community of people.
* Your AMI is stored as an EBS snapshot in the same region as the instance.
  You will pay for the cost of that EBS storage.

Types of AMIs
=============
Amazon EBS-backed AMI – The root device for an instance launched from the AMI is an Amazon Elastic Block Store (Amazon EBS) volume created from an Amazon EBS snapshot.
Amazon instance store-backed AMI – The root device for an instance launched from the AMI is an instance store volume created from a template stored in Amazon S3.

Create an AMI
=============
1. Need to start a EC2 first
    In User data script, add the bash script to install the softwares we need.
2. Can create AMI from either running instance or stopped instance
3. Right click on EC2 instance from where we want to create image.
4. Image name and create.
    - this will take a snapshot of ebs root volume
    - it will take a little bit of time to create a image.

Start an EC2 with My AMIs
=========================
1. Create Instance
2. My AMIs
3. Do regular steps
    - User data script only for business. Like running tomcat.
    - Because other things are taken care by base AMI that we have created.
4. Launch instance.
    - There should a faster boot up time as the software and configurations are pre-packed by the base AMI

